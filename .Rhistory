# Get contour plot
nc <- 100 # number contour each dimension
fx <- fy <- seq(0,1,length.out = nc)
fz <- matrix(0,nc,nc)
for (xi in 1:nc) for(yi in 1:nc) fz[xi,yi] <- f(matrix(c(fx[xi],fy[yi]),1,2))
contour(fx,fy,fz,nlevels = 5)
my.filled.contour(fx,fy,fz,nlevels = 5)
p <- 2 # dimension
k <- 4*p # MED distance thing
gsa.out <- GenSA::GenSA(c(.5,.5),function(xx)-f(xx),c(0,0),c(1,1),control = list(trace.mat=F))
X <- matrix(gsa.out$par,1,2)
X
text(X[1],X[2],col=1,pch=1)
for(i in 2:30) {
print(paste('starting',i))
#f_opt <- optimize(function(xx){f_min(xx,X)},interval = c(0,1),temp='SANN')
#xnew <- f_opt$min
#f_opt <- which.min(f_min(xavail,X))
#GenSA::GenSA(c(.5,.5),function(xx)-f(xx),c(0,0),c(1,1),control = list(trace.mat=F))
gsa.out <- GenSA::GenSA(par=c(.5,.5),fn=function(xx)log(f_min(xx,X,kk=k)),lower=c(0,0),upper=c(1,1),control = list(maxit=10,trace.mat=F,max.time=1,max.call=10))
xnew <- gsa.out$par
X <- rbind(X,xnew)
#xavail <- xavail[-f_opt]
text(xnew[1],xnew[2],i,col=1)
#points(xnew[1],xnew[2],col=2)
print(xnew)
}
my.filled.contour(fx,fy,fz,nlevels = 5)
gsa.out <- GenSA::GenSA(par=NULL,fn=function(xx)-f(xx),lower=c(0,0),upper=c(1,1),control = list(trace.mat=F))
X <- matrix(gsa.out$par,1,2)
text(X[1],X[2],col=1,pch=1)
for(i in 2:30) {
print(paste('starting',i))
#f_opt <- optimize(function(xx){f_min(xx,X)},interval = c(0,1),temp='SANN')
#xnew <- f_opt$min
#f_opt <- which.min(f_min(xavail,X))
#GenSA::GenSA(c(.5,.5),function(xx)-f(xx),c(0,0),c(1,1),control = list(trace.mat=F))
gsa.out <- GenSA::GenSA(par=NULL,fn=function(xx)log(f_min(xx,X,kk=k)),lower=c(0,0),upper=c(1,1),control = list(maxit=10,trace.mat=F,max.time=1,max.call=10))
xnew <- gsa.out$par
X <- rbind(X,xnew)
#xavail <- xavail[-f_opt]
text(xnew[1],xnew[2],i,col=1)
#points(xnew[1],xnew[2],col=2)
print(xnew)
}
my.filled.contour(fx,fy,fz,nlevels = 5)
# Initialize with mode
gsa.out <- GenSA::GenSA(par=NULL,fn=function(xx)-f(xx),lower=c(0,0),upper=c(1,1),control = list(trace.mat=F))
X <- matrix(gsa.out$par,1,2)
text(X[1],X[2],col=1,pch=1)
for(i in 2:30) {
#GenSA::GenSA(c(.5,.5),function(xx)-f(xx),c(0,0),c(1,1),control = list(trace.mat=F))
#gsa.out <- GenSA::GenSA(par=NULL,fn=function(xx)log(f_min(xx,X,kk=k)),lower=c(0,0),upper=c(1,1),control = list(maxit=10,trace.mat=F,max.time=1,max.call=10))
gsa.out <- GenSA::GenSA(par=NULL,fn=function(xx)log(f_min(xx,X,kk=k)),lower=c(0,0),upper=c(1,1),control = list(trace.mat=F))
xnew <- gsa.out$par
X <- rbind(X,xnew)
text(xnew[1],xnew[2],i,col=1)
}
X[6,]
X[2,]
my.filled.contour(fx,fy,fz,nlevels = 5)
gsa.out <- GenSA::GenSA(par=NULL,fn=function(xx)-f(xx),lower=c(0,0),upper=c(1,1),control = list(trace.mat=F))
X <- matrix(gsa.out$par,1,2)
text(X[1],X[2],labels=1,col=1,pch=1)
for(i in 2:30) {
# GenSA is slow, maybe change parameters to limit time
#gsa.out <- GenSA::GenSA(par=NULL,fn=function(xx)log(f_min(xx,X,kk=k)),lower=c(0,0),upper=c(1,1),control = list(maxit=10,trace.mat=F,max.time=1,max.call=10))
# Or use default
gsa.out <- GenSA::GenSA(par=NULL,fn=function(xx)log(f_min(xx,X,kk=k)),lower=c(0,0),upper=c(1,1),control = list(trace.mat=F,max.time=1))
# Add new point
xnew <- gsa.out$par
X <- rbind(X,xnew)
text(x=xnew[1],y=xnew[2],labels=i,col=1)
}
text(.99,.8,6)
text(.96,.8,6)
text(.94,.8,6)
Q
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_2D.R')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/TestFunctions.R')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_2D.R')
SMED_2D(banana)
SMED_2D(banana,max.time=.2)
SMED_2D(banana,max.time=.2,n=30)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
SMED_2D(banana,max.time=.2)
abline(h=.03)
plot(1:10)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
SMED_2D(banana,max.time=.2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
SMED_2D(banana,max.time=.2)
abline(h=.1)
source('~/.active-rstudio-document')
SMED_2D(banana,max.time=.2)
abline(h=.1)
source('~/.active-rstudio-document')
SMED_2D(banana,max.time=.2)
abline(h=.1)
source('~/.active-rstudio-document')
SMED_2D(banana,max.time=.2)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/TestFunctions.R')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_2D.R')
SMED_2D(banana)
SMED_2D(banana,n=10,max.time=.2)
rbind(1:2,3:4)
rbind(1:2,la=3:4)
rbind(1:2,2=3:4)
rbind(1:2,'2'=3:4)
rbind(1:2,NULL=3:4)
setNames(data.frame(x=1:4))
setNames(data.frame(x=1:4),nm=NULL)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_2D.R')
SMED_2D(banana,n=10,max.time=.2)
SMED_2D(banana,n=50,max.time=.2)
library('GPfit')
source('~/.active-rstudio-document')
SMED_2D(banana,n=10,max.time=.2)
source('~/.active-rstudio-document')
SMED_2D(banana,n=10,max.time=.2)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_2D(banana,n=10,max.time=.2)
i
X
SMED_2D(banana,n=10,max.time=.2)
X
Y
fit.GP.SMED(X=X, Y=Y)
fit.GP.SMED(X=rbind(X,c(.4,.6)), Y=c(Y,.5))
fit.GP.SMED(X=rbind(X,c(.4,.6)), Y=c(Y,.5)) -> mod
predict.GP(mod,matrix(c(.5,.5),2,1))
predict.GP(mod,matrix(c(.5,.5),1,2))
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
my.filled.contour.func(banana,10)
my.filled.contour.func(banana,100)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
SMED_2D(banana,n=10,max.time=.2)
X
SMED_2D(banana,n=10,max.time=.2)
GP_fit(X,Y)
X
source('C:/Users/cbe117/School/SportsAnalytics/NBA/nba_functions.R')
library(plyr)
nba <- convert.raw.nba("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\2015Season20160211.csv")
FD.nba.conversion <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FD.nba.conversion.csv")
sal <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDSalaryNow_2_8_16.csv",stringsAsFactors=F)
res <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDResults_2_8_16.csv",stringsAsFactors=F)
fit.LM.2(nba,sal,res)
# Standard errors of coeffs coef(summary(mod2))[,2]
sal2 <- fit.LM.2.w.error(nba,sal,res)
sal2 <- sal2[-which(is.na(sal2$PLAYER_ID)),]
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
cm <- diag(length(nms))#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 40
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
library(MASS)
MASS::mvrnorm(1,rep(0,15),sal2.cms[[1]])
tmat <- sal2.cms[[1]]
eigen(tmat)$val
eigen(tmat+diag(.52,15))$val
tmat.cov <- tmat
tmat.cov.nms <- dimnames(tmat)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
eigen(tmat.cov)$val
MASS::mvrnorm(1,rep(0,15),tmat.cov)
View(tmat.cov)
MASS::mvrnorm(1,rep(0,15),tmat.cov)
source('~/.active-rstudio-document')
nba <- convert.raw.nba("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\2015Season20160211.csv")
FD.nba.conversion <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FD.nba.conversion.csv")
sal <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDSalaryNow_2_8_16.csv",stringsAsFactors=F)
res <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDResults_2_8_16.csv",stringsAsFactors=F)
fit.LM.2(nba,sal,res)
sal2 <- fit.LM.2.w.error(nba,sal,res)
sal2 <- sal2[-which(is.na(sal2$PLAYER_ID)),]
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
cm <- diag(length(nms))#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 40
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
library(MASS)
# DOESNT WORK, has 1 neg e-val, -.5, needs to be pos def
MASS::mvrnorm(1,rep(0,15),sal2.cms[[1]])
tmat <- sal2.cms[[1]]
eigen(tmat)$val
eigen(tmat+diag(.52,15))$val
tmat.cov <- tmat
tmat.cov.nms <- dimnames(tmat)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
eigen(tmat.cov)$val
MASS::mvrnorm(1,rep(0,15),tmat.cov)
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
cm <- diag(length(nms))#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
cm <- diag(length(nms))#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {browser()}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
cm
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {browser()}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
#dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
dimnames(cm) <- list(nms,nms)
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {browser()}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
#dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
dimnames(cm) <- list(nms,nms)
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {
break
}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
source('C:/Users/cbe117/School/SportsAnalytics/NBA/nba_functions.R')
library(plyr)
nba <- convert.raw.nba("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\2015Season20160211.csv")
FD.nba.conversion <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FD.nba.conversion.csv")
sal <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDSalaryNow_2_8_16.csv",stringsAsFactors=F)
res <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDResults_2_8_16.csv",stringsAsFactors=F)
#fit.LM.2(nba,sal,res)
sal2a <- fit.LM.2.w.error(nba,sal,res)
sal2 <- sal2[-which(is.na(sal2a$PLAYER_ID)),]
sal2 <- sal2a[-which(is.na(sal2a$PLAYER_ID)),]
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
#dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
dimnames(cm) <- list(nms,nms)
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {
break
}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
library(MASS)
# DOESNT WORK, has 1 neg e-val, -.5, needs to be pos def
MASS::mvrnorm(1,rep(0,15),sal2.cms[[1]])
tmat <- sal2.cms[[1]]
eigen(tmat)$val
eigen(tmat+diag(.52,15))$val
tmat.cov <- tmat
tmat.cov.nms <- dimnames(tmat)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
eigen(tmat.cov)$val
MASS::mvrnorm(1,rep(0,15),tmat.cov)
length(sal2.cms)
source('C:/Users/cbe117/School/SportsAnalytics/NBA/nba_functions.R')
cor.to.cov <- function(tmat,sal2) {
tmat.cov <- tmat
tmat.cov.nms <- dimnames(tmat)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
return(tmat.cov)
}
cor.to.cov(tmat,sal2)
eigen(cor.to.cov(tmat,sal2))
all.covs <- lapply(sal2.cms,cor.to.cov)
all.covs <- lapply(sal2.cms,cor.to.cov,sal2)
str(all.covs)
source('~/.active-rstudio-document')
SMED_2D_GP_fix(banana,n=10,max.time=.2)
setwd("C:/Users/cbe117/School/DOE/SMED/SMED-Code")
source('TestFunctions.R')
SMED_2D_GP_fix(banana,n=10,max.time=.2)
source('~/.active-rstudio-document')
SMED_2D_GP_fix(banana,n=10,max.time=.2)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D_fix.R')
SMED_2D_GP_fix(banana,n=10,max.time=.2)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D_fix.R')
SMED_2D_GP_fix(banana,n=10,max.time=.2)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D_fix.R')
SMED_2D_GP_fix(banana,n=10,max.time=.2)
