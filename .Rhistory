cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {browser()}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
#dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
dimnames(cm) <- list(nms,nms)
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {
break
}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
source('C:/Users/cbe117/School/SportsAnalytics/NBA/nba_functions.R')
library(plyr)
nba <- convert.raw.nba("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\2015Season20160211.csv")
FD.nba.conversion <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FD.nba.conversion.csv")
sal <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDSalaryNow_2_8_16.csv",stringsAsFactors=F)
res <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDResults_2_8_16.csv",stringsAsFactors=F)
#fit.LM.2(nba,sal,res)
sal2a <- fit.LM.2.w.error(nba,sal,res)
sal2 <- sal2[-which(is.na(sal2a$PLAYER_ID)),]
sal2 <- sal2a[-which(is.na(sal2a$PLAYER_ID)),]
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
#dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
dimnames(cm) <- list(nms,nms)
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {
break
}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
library(MASS)
# DOESNT WORK, has 1 neg e-val, -.5, needs to be pos def
MASS::mvrnorm(1,rep(0,15),sal2.cms[[1]])
tmat <- sal2.cms[[1]]
eigen(tmat)$val
eigen(tmat+diag(.52,15))$val
tmat.cov <- tmat
tmat.cov.nms <- dimnames(tmat)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
eigen(tmat.cov)$val
MASS::mvrnorm(1,rep(0,15),tmat.cov)
length(sal2.cms)
source('C:/Users/cbe117/School/SportsAnalytics/NBA/nba_functions.R')
cor.to.cov <- function(tmat,sal2) {
tmat.cov <- tmat
tmat.cov.nms <- dimnames(tmat)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
return(tmat.cov)
}
cor.to.cov(tmat,sal2)
eigen(cor.to.cov(tmat,sal2))
all.covs <- lapply(sal2.cms,cor.to.cov)
all.covs <- lapply(sal2.cms,cor.to.cov,sal2)
str(all.covs)
source('C:/Users/cbe117/School/SportsAnalytics/NBA/nba_functions.R')
nbacor <- get.cor.and.cg.all(nba)
library(plyr)
nba <- convert.raw.nba("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\2015Season20160211.csv")
FD.nba.conversion <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FD.nba.conversion.csv")
sal <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDSalaryNow_2_8_16.csv",stringsAsFactors=F)
res <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDResults_2_8_16.csv",stringsAsFactors=F)
sal2a <- fit.LM.2.w.error(nba,sal,res)
sal2 <- sal2a[-which(is.na(sal2a$PLAYER_ID)),]
nbacor <- get.cor.and.cg.all(nba)
str(nbacor)
length(nbacor)
length(nbacor[[1]])
nbacor[[1]]
sal2.get.cor <- function(x,nba.cor.cg) {
# Takes in a sal for a team along with nba.cor.cg
# and returns a correlation matrix for those players
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
#dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
dimnames(cm) <- list(nms,nms)
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {
break
}
}
}
# Then create covariance matrix
tmat.cov <- cm
tmat.cov.nms <- dimnames(cm)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
return(list(cor=cm,cov=tmat.cov)
}
sal2.get.cor <- function(x,nba.cor.cg) {
# Takes in a sal for a team along with nba.cor.cg
# and returns a correlation matrix for those players
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
#dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
dimnames(cm) <- list(nms,nms)
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {
break
}
}
}
# Then create covariance matrix
tmat.cov <- cm
tmat.cov.nms <- dimnames(cm)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
return(list(cor=cm,cov=tmat.cov))
}
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
sal2.cms
length(sal2.cms)
sal2.cms[[1]]
sal2.cor.and.cov <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
View(sal2)
numeric(10)
numeric(10)->temp
temp
names(temp) <- 1:10
temp
source('C:/Users/cbe117/School/SportsAnalytics/NBA/nba_functions.R')
sal2.get.cor <- function(x,nba.cor.cg,sal2) {
# Takes in a sal for a team along with nba.cor.cg
# and returns a correlation matrix for those players
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
#dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
dimnames(cm) <- list(nms,nms)
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {
break
}
}
}
# Then create covariance matrix
tmat.cov <- cm
tmat.cov.nms <- dimnames(cm)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
# Get predicted mean from sal2, column is LM.2.pred
means <- numeric(length(tmat.cov.nms))
names(means) <- tmat.cov.nms
for(i in 1:length(tmat.cov.nms)) {
nm.this <- as.character(tmat.cov.nms[i])
means[nm.this] <- sal2$LM.2.pred[as.character(sal2$PLAYER_ID)==nm.this]
}
return(list(mu=means,cor=cm,cov=tmat.cov))
}
sal2.cor.and.cov <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor,sal2)
sal2.cor.and.cov
length(sal2.cor.and.cov)
length(sal2.cor.and.cov[[1]])
sal2.cor.and.cov[[1]]
sal2.cor.and.cov[[1]]
sqrt(93.2379/500)
sqrt((93.2379-314*.00045723+314*1e-8)/500)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
setwd("C:/Users/cbe117/School/DOE/SMED/SMED-Code")
source('TestFunctions.R')
SMED_GP_2D(f=banana,n0=10,n=5,contour.fit=1,GP.package='exact',continue.option=T)
SMED_GP_2D(f=banana,n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(x){exp(-(sum((x-.5)^2)))},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
warnings()
SMED_GP_2D(f=function(x){exp(-(sum((x-.5)^2)))},n0=10,n=5,contour.fit=1,GP.package='exact',continue.option=T)
SMED_GP_2D(f=function(x){exp(-(sum((x-.5)^2))/2)},n0=10,n=5,contour.fit=1,GP.package='exact',continue.option=T)
SMED_GP_2D(f=function(x){exp(-(sum((x-.5)^2))/4)},n0=10,n=5,contour.fit=1,GP.package='exact',continue.option=T)
SMED_GP_2D(f=function(x){exp(-(sum((x-.5)^2))/8)},n0=10,n=5,contour.fit=1,GP.package='exact',continue.option=T)
my.filled.contour.func(function(x){exp(-(sum((x-.5)^2))/8)})
my.filled.contour.func(function(x){exp(-(sum((x-.5)^2))/80)})
my.filled.contour.func(function(x){exp(-(sum((x-.5)^2)/80))})
my.filled.contour.func(function(x){exp(-(sum((x-.25)^2)/80))})
my.filled.contour.func(function(x){exp(-(sum((x-.5)^2)/800))})
my.filled.contour.func(function(x){exp(-(sum((x-.5)^2)/.1))})
my.filled.contour.func(function(x){exp(-(sum((x-.5)^2)/.01))})
SMED_GP_2D(f=function(x){exp(-(sum((x-.5)^2))/.01)},n0=10,n=5,contour.fit=1,GP.package='exact',continue.option=T)
SMED_GP_2D(f=function(x){exp(-(sum((x-.5)^2))/.01)},n0=50,n=5,contour.fit=1,GP.package='exact',continue.option=T)
SMED_GP_2D(f=banana,n0=50,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
my.filled.contour.func(function(x)predict.GP.SMED(x,mod))
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
predict.GP.SMED(runif(2),mod)
mod
qq(runif(2),mod)
predict.GP.SMED(mod,runif(2))
predict.GP.SMED(mod,runif(2))
predict.GP.SMED(mod,runif(2))
predict.GP.SMED(mod,runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
qq(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
my.filled.contour.func(function(aa){predict.GP.SMED(mod,aa)})
my.filled.contour.func(function(aa){qq(mod=mod,xx=aa)})
qq(mod=mod,xx=c(.5,.1)
)
qq(mod=mod,xx=c(.5,.7))
predict.GP.SMED(mod=mod,xx=c(.5,.1)
)
predict.GP.SMED(mod=mod,xx=c(.5,.7))
SMED_GP_2D(f=banana,n0=50,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
my.filled.contour.func(function(aa){qq(mod=mod,xx=aa)})
predict.GP.SMED(mod=mod,xx=c(.5,.1))
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_GP_2D(f=banana,n0=50,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
warnings()
SMED_GP_2D(f=banana,n0=50,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
my.filled.contour.func(function(aa){qq(mod=mod,xx=aa)})
warnings()
predict.GP.SMED(mod=mod,xx=c(.5,.7))
predict.GP.SMED(mod=mod,xx=c(.5,.1))
my.filled.contour.func(function(aa){predict.GP.SMED(mod=mod,xx=aa)})
X <- lhs::maximinLHS(n=50,k=2)
Sigma <- diag(1,50)
for(i in 1:49) {
for(j in (i+1):50) {
cor.ij <- exp(-sum((X[i,]-X[j,])^2))
Sigma[i,j] <- cor.ij
Sigma[j,i] <- cor.ij
}
}
View(round(Sigma,2))
for(i in 1:49) {
for(j in (i+1):50) {
cor.ij <- exp(-sum((X[i,]-X[j,])^2)/.1)
Sigma[i,j] <- cor.ij
Sigma[j,i] <- cor.ij
}
}
View(round(Sigma,2))
Z <- MASS::mvrnorm(n=1,mu=rep(0,50),Sigma=Sigma)
mod <- laGP::newGPsep(X=X,Z=Z)
mod <- laGP::newGPsep(X=X,Z=Z,d=1e-3)
mod <- laGP::newGPsep(X=X,Z=Z,d=2,g=1e-3)
XX <- matrix(runif(100),ncol=2)
system.time(laGP::predGPsep(gpsepi = mod,XX = XX))
system.time(replicate(100,laGP::predGPsep(gpsepi = mod,XX = XX),))
system.time(replicate(1000,laGP::predGPsep(gpsepi = mod,XX = XX),))
XX <- matrix(runif(10),ncol=2)
system.time(replicate(1000,laGP::predGPsep(gpsepi = mod,XX = XX2),))
XX2 <- matrix(runif(10),ncol=2)
system.time(replicate(1000,laGP::predGPsep(gpsepi = mod,XX = XX2),))
system.time(replicate(10000,laGP::predGPsep(gpsepi = mod,XX = XX2),))
dim(XX)
dim(XX2)
XX <- matrix(runif(100),ncol=2)
system.time(replicate(1000,laGP::predGPsep(gpsepi = mod,XX = XX),))
system.time(replicate(10000,laGP::predGPsep(gpsepi = mod,XX = XX2),))
XX <- matrix(runif(100),ncol=2)
system.time(replicate(1000,laGP::predGPsep(gpsepi = mod,XX = XX),))
XX2 <- matrix(runif(2),ncol=2)
system.time(replicate(50000,laGP::predGPsep(gpsepi = mod,XX = XX2),))
XX <- matrix(runif(1000),ncol=2)
XX <- matrix(runif(1000),ncol=2)
system.time(replicate(100,laGP::predGPsep(gpsepi = mod,XX = XX),))
XX2 <- matrix(runif(2),ncol=2)
system.time(replicate(50000,laGP::predGPsep(gpsepi = mod,XX = XX2),))
XX <- matrix(runif(100),ncol=2)
system.time(replicate(1000,laGP::predGPsep(gpsepi = mod,XX = XX),))
XX2 <- matrix(runif(2),ncol=2)
system.time(replicate(50000,laGP::predGPsep(gpsepi = mod,XX = XX2),))
Sample.sizes <- c(2,4,8,16,32,64,128,256,512,1024)
Sample.reps <- 1024*1000/Sample.sizes
Sample.reps
Sample.reps <- 1024*100/Sample.sizes
system.time(replicate(1000,laGP::predGPsep(gpsepi = mod,XX = XX),)) -> temp
temp
temp[1]
temp[3]
Sample.times <- rep(-1,10)
Sample.times
rm(XX,XX2)
Sample.sizes <- c(2,4,8)#,16,32,64,128,256,512,1024)
Sample.reps <- 1024*100/Sample.sizes
Sample.times <- rep(-1,10)
for(i in 1:length(Samples.sizes)) {
for(i in 1:length(Samples.sizes)) {
XX <- matrix(runif(Samples.sizes[i]),ncol=2)
S.time <- system.time(replicate(Sample.reps[i],laGP::predGPsep(gpsepi = mod,XX = XX),)) -> temp
Samples.times[i] <- S.time[3]
}
for(i in 1:length(Samples.sizes)) {
XX <- matrix(runif(Sample.sizes[i]),ncol=2)
for(i in 1:length(Sample.sizes)) {
XX <- matrix(runif(Sample.sizes[i]),ncol=2)
S.time <- system.time(replicate(Sample.reps[i],laGP::predGPsep(gpsepi = mod,XX = XX),)) -> temp
for(i in 1:length(Sample.sizes)) {
XX <- matrix(runif(Sample.sizes[i]),ncol=2)
S.time <- system.time(replicate(Sample.reps[i],laGP::predGPsep(gpsepi = mod,XX = XX),)) -> temp
Sample.times[i] <- S.time[3]
}
Sample.times
Sample.sizes <- c(2,4,8,16,32,64,128,256,512,1024)
Sample.reps <- 1024*100/Sample.sizes
Sample.times <- rep(-1,10)
for(i in 1:length(Sample.sizes)) {
XX <- matrix(runif(Sample.sizes[i]),ncol=2)
S.time <- system.time(replicate(Sample.reps[i],laGP::predGPsep(gpsepi = mod,XX = XX),)) -> temp
Sample.times[i] <- S.time[3]
}
Sample.times
rbind(Sample.sizes,Sample.times)
laGP::deleteGPsep(mod)
