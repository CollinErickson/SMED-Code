library(MASS)
MASS::mvrnorm(1,rep(0,15),sal2.cms[[1]])
tmat <- sal2.cms[[1]]
eigen(tmat)$val
eigen(tmat+diag(.52,15))$val
tmat.cov <- tmat
tmat.cov.nms <- dimnames(tmat)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
eigen(tmat.cov)$val
MASS::mvrnorm(1,rep(0,15),tmat.cov)
View(tmat.cov)
MASS::mvrnorm(1,rep(0,15),tmat.cov)
source('~/.active-rstudio-document')
nba <- convert.raw.nba("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\2015Season20160211.csv")
FD.nba.conversion <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FD.nba.conversion.csv")
sal <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDSalaryNow_2_8_16.csv",stringsAsFactors=F)
res <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDResults_2_8_16.csv",stringsAsFactors=F)
fit.LM.2(nba,sal,res)
sal2 <- fit.LM.2.w.error(nba,sal,res)
sal2 <- sal2[-which(is.na(sal2$PLAYER_ID)),]
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
cm <- diag(length(nms))#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 40
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
library(MASS)
# DOESNT WORK, has 1 neg e-val, -.5, needs to be pos def
MASS::mvrnorm(1,rep(0,15),sal2.cms[[1]])
tmat <- sal2.cms[[1]]
eigen(tmat)$val
eigen(tmat+diag(.52,15))$val
tmat.cov <- tmat
tmat.cov.nms <- dimnames(tmat)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
eigen(tmat.cov)$val
MASS::mvrnorm(1,rep(0,15),tmat.cov)
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
cm <- diag(length(nms))#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
cm <- diag(length(nms))#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {browser()}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
cm
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {browser()}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
#dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
dimnames(cm) <- list(nms,nms)
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {browser()}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
#dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
dimnames(cm) <- list(nms,nms)
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {
break
}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
source('C:/Users/cbe117/School/SportsAnalytics/NBA/nba_functions.R')
library(plyr)
nba <- convert.raw.nba("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\2015Season20160211.csv")
FD.nba.conversion <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FD.nba.conversion.csv")
sal <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDSalaryNow_2_8_16.csv",stringsAsFactors=F)
res <- read.csv("C:\\Users\\cbe117\\School\\SportsAnalytics\\NBA\\FDResults_2_8_16.csv",stringsAsFactors=F)
#fit.LM.2(nba,sal,res)
sal2a <- fit.LM.2.w.error(nba,sal,res)
sal2 <- sal2[-which(is.na(sal2a$PLAYER_ID)),]
sal2 <- sal2a[-which(is.na(sal2a$PLAYER_ID)),]
sal2.get.cor <- function(x,nba.cor.cg) {
# Test: x <- sal2[sal2$Team=='ATL',]
TEAM_ID <- x$TEAM_ID[1]
#browser()
nms <- x$PLAYER_ID # Names of players on team
#cm <- diag(length(nms))
#matrix(0,length(nms),length(nms),dimnames = list(nms,nms)) # correlation matrix
#dimnames(cm) <- list(nms,nms)
nms.cor <- dimnames(nba.cor.cg[[as.character(TEAM_ID)]][[1]])[[1]]
min.games.played.together = 5
while(T) {
cm <- diag(length(nms))
dimnames(cm) <- list(nms,nms)
for(i in 1:(length(nms)-1)) {
for (j in (i+1):length(nms)) {
if(nms[i]%in%nms.cor  & nms[j]%in%nms.cor) {
if(nba.cor.cg[[as.character(TEAM_ID)]][[2]][as.character(nms[i]),as.character(nms[j])]>=min.games.played.together){
newval <- nba.cor.cg[[as.character(TEAM_ID)]][[1]][as.character(nms[i]),as.character(nms[j])]
cm[i,j] <- newval
cm[j,i] <- newval
}
}
}
}
if(min(eigen(cm)$val) >=0) {
break
} else {
print(c(min.games.played.together,min(eigen(cm)$val)))
min.games.played.together <- min.games.played.together + 5
if (min.games.played.together>50) {
break
}
}
}
return(cm)
}
nbacor <- get.cor.and.cg.all(nba)
# Gives correlation matrices for fan dual
sal2.cms <- dlply(sal2,.(TEAM_ID),sal2.get.cor,nbacor)
library(MASS)
# DOESNT WORK, has 1 neg e-val, -.5, needs to be pos def
MASS::mvrnorm(1,rep(0,15),sal2.cms[[1]])
tmat <- sal2.cms[[1]]
eigen(tmat)$val
eigen(tmat+diag(.52,15))$val
tmat.cov <- tmat
tmat.cov.nms <- dimnames(tmat)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
eigen(tmat.cov)$val
MASS::mvrnorm(1,rep(0,15),tmat.cov)
length(sal2.cms)
source('C:/Users/cbe117/School/SportsAnalytics/NBA/nba_functions.R')
cor.to.cov <- function(tmat,sal2) {
tmat.cov <- tmat
tmat.cov.nms <- dimnames(tmat)[[1]]
for (i in 1:length(tmat.cov.nms)) {
tmat.cov[i,] <- tmat.cov[i,] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
tmat.cov[,i] <- tmat.cov[,i] * sal2$LM.2.pred.se[sal2$PLAYER_ID==tmat.cov.nms[i]]
}
return(tmat.cov)
}
cor.to.cov(tmat,sal2)
eigen(cor.to.cov(tmat,sal2))
all.covs <- lapply(sal2.cms,cor.to.cov)
all.covs <- lapply(sal2.cms,cor.to.cov,sal2)
str(all.covs)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
setwd("C:/Users/cbe117/School/DOE/SMED/SMED-Code")
source('TestFunctions.R')
source('~/.active-rstudio-document')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_GP_2D(f=banana,n0=10,n=5,contour.fit=1,GP.package='mlegp',continue.option=T)
exp(20)
SMED_GP_2D(f=banana,n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=banana,n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_GP_2D(f=banana,n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
n.more=5
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_GP_2D(f=banana,n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod,qq.scale=1e-6)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod,qq.scale=1e-6)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod,qq.scale=1e-6)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod,qq.scale=1e-6)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod,qq.scale=1e-10)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod,qq.scale=1e-10)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod,qq.scale=1e-10)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod,qq.scale=1e-20)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod,qq.scale=1e-20)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod,qq.scale=1e-50)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod,qq.scale=1e-50)
qq(runif(2))
qq(runif(2),mod)
qq(runif(2),mod)
qq(runif(2),mod)
qq(runif(2),mod)
qq(runif(2),mod)
qq(runif(2),mod)
qq(runif(2),mod)
qq(runif(2),mod)
qq(runif(2),mod)
qq(runif(2),mod)
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED
mod
print(mod)
summary(mod)
mleGP(mod)
mleGPsep(mod)
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))^(-.25)
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
my.filled.contour.func(function(xx)predict.GP.SMED(mod,xx))
predict.GP.SMED(mod=mod,xx=c(0,0))
my.filled.contour.func <- function(fn,n=100,...) {
x <- seq(0,1,length.out = n)
y <- seq(0,1,length.out = n)
z <- matrix(NA,n,n)
for(xi in 1:n) for(yi in 1:n) z[xi,yi] <- fn(c(x[xi],y[yi]))
browser()
my.filled.contour(x,y,z,...)
}
my.filled.contour.func(function(xx)predict.GP.SMED(mod,xx))
z
fn(c(0,0))
x[xi]
y[yi]
fn(c(1,1))
fn(c(x[xi],y[yi])
)
fn(c(x[xi],y[yi])) -> temp
temp
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_GP_2D(f=banana,n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
predict.GP.SMED(mod=mod,xx=c(0,0))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
predict.GP.SMED(mod=mod,xx=runif(2))
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
qq(runif(2))
qq(runif(2),mod)
qq(runif(2),mod)
xnew <- runif(2);xall <- X;kk <- k
(qq(xnew,mod=mod)*qq.scale)^kk*sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk}))
qq.scale=1
(qq(xnew,mod=mod)*qq.scale)^kk*sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk}))
(qq(xnew,mod=mod)*qq.scale)^kk*sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk}))
(qq(xnew,mod=mod)*qq.scale)^kk*sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk}))
(qq(xnew,mod=mod)*qq.scale)^kk*sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk}))
(qq(xnew,mod=mod)*qq.scale)^kk*sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk}))
(qq(xnew,mod=mod)*qq.scale)^kk*sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk}))
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
f_min(runif(2),X[keep.Delta,],kk=k,mod=mod)
(qq(xnew,mod=mod)*qq.scale)^kk*sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk}))
(qq(xnew,mod=mod)*qq.scale)^kk*sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk}))
c(qq(xnew,mod=mod)*qq.scale)^kk,sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk}))
c((qq(xnew,mod=mod)*qq.scale)^kk,sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk})))
qq(runif(2),mod)
qq(runif(2),mod)
qq(runif(2),mod)
c((qq(xnew,mod=mod)*qq.scale)^kk,sum(apply(xall,1,function(xx){((qq(xx,mod=mod)*qq.scale)/(sqrt(sum((xx-xnew)^2))))^kk})))
(qq(runif(2),mod=mod)*qq.scale)^kk
(qq(runif(2),mod=mod)*qq.scale)^kk
(qq(runif(2),mod=mod)*qq.scale)^kk
(qq(runif(2),mod=mod)*qq.scale)^kk
(qq(runif(2),mod=mod)*qq.scale)^kk
(qq(runif(2),mod=mod)*qq.scale)^kk
(qq(runif(2),mod=mod)*qq.scale)^kk
(qq(runif(2),mod=mod)*qq.scale)
(qq(runif(2),mod=mod)*qq.scale)
(qq(runif(2),mod=mod)*qq.scale)
temp <- runif(2);(qq(temp,mod=mod)*qq.scale)
temp <- runif(2);(qq(temp,mod=mod)*qq.scale)
temp
predict.GP.SMED(mod,runif(2))
predict.GP.SMED(mod,runif(2))
predict.GP.SMED(mod,temp)
Y
points(temp)
points(temp[1],temp[2],col=2)
predict.GP.SMED(mod,c(0,.3))
predict.GP.SMED(mod,c(.2,0))
SMED_GP_2D(f=function(xx)banana(xx+10),n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
warnings()
SMED_GP_2D(f=function(xx){banana(xx)},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_GP_2D(f=function(xx){banana(xx)},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(xx){banana(xx)},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(xx){banana(xx)},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(xx){banana(xx)+1},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(xx){banana(xx)+1},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(xx){banana(xx)+2},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(xx){banana(xx)+3},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
xx
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
warnings()
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/SMED_GP_2D.R')
warnings()
SMED_GP_2D(f=function(xx){banana(xx)+10},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
warnings()
SMED_GP_2D(f=function(xx){banana(xx)},n0=10,n=5,contour.fit=1,GP.package='laGP',continue.option=T)
