scale(1,2,3)
scale(1:5,5,300)
X.LHS
dim(X.LHS)
rescale2D <- function(x,xlim,ylim) {
if (dim(x)[2] != 2) {stop('x must have two columns')}
x[,1] <- xlim[1] + x[,1]*(xlim[2] - xlim[1])
x[,2] <- ylim[1] + x[,2]*(ylim[2] - ylim[1])
return(x)
}
rescale2D(data.frame(x=1:4,y=2:5),c(-1,1),c(100,200))
rescale2D <- function(x,xlim,ylim) {
if (dim(x)[2] != 2) {stop('x must have two columns')}
x[,1] <- (x[,1] - xlim[1]) / (xlim[2] - xlim[1])
x[,2] <- (x[,2] - ylim[1]) / (ylim[2] - ylim[1])
return(x)
}
rescale2D(data.frame(x=1:4,y=2:5),c(-1,1),c(100,200))
rescale1D <- function(x,xlim) {
(x-min(x))/(max(x)-min(x)) * (xlim[2] - xlim[1]) + xlim[1]
}
rescale1D(1:5,0:1)
rescale1D(1:5,9:10)
rescale2D <- function(x,xlim,ylim) {
if (dim(x)[2] != 2) {stop('x must have two columns')}
x[,1] <- rescale1D(x[,1],xlim)
x[,2] <- rescale1D(x[,2],ylim)
return(x)
}
rescale2D(data.frame(x=1:4,y=2:5),c(-1,1),c(100,200))
rescale2D(X.LHS,Colorado.xlim,Colorado.ylim)
cbind(rescale2D(X.LHS,Colorado.xlim,Colorado.ylim),X.Colorado)
X.LHS
cbind(rescale2D(X.LHS,Colorado.xlim,Colorado.ylim),X.Colorado)
apply(X.LHS,2,max)
apply(X.LHS,2,min)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
require(XML)
elev_url <- "https://maps.googleapis.com/maps/api/elevation/xml?locations=39.7391536,-104.9847034|36.455556,-116.866667&key=AIzaSyDpHsTEEAWJqE1MbWnMjwJI_Yo54CUviw0"
elev_html <- getURL(elev_url)
elev_xml <- xmlParse(elev_html)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
elev_html <- getURL(elev_url)
elev_html <- RCurl::getURL(elev_url)
elev_xml <- xmlParse(elev_html)
elev_xml
elev_xml[1]
elev_xml <- xmlTreeParse(elev_html)
lat <-  elev_xml[[1]][[1]][[2]][[1]][[1]][[1]]
lat
xmlToDataFrame(elev_xml)
elev_xml <- xmlParse(elev_html)
xmlToDataFrame(elev_xml)
xmlToDataFrame(nodes = xmlChildren(xmlRoot(elev_xml)[["data"]]))
xmlRoot(elev_xml)
xmlRoot(elev_xml)[['result']]
xmlToDataFrame(nodes = xmlChildren(xmlRoot(elev_xml)[["result"]]))
xmlToDataFrame(nodes = getNodeSet((elev_xml)[["result"]]))
xmlToDataFrame(nodes = getNodeSet((elev_xml),'/result'))
xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/elevation'))
resols <- xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/resolution'))
resols
xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/location/lat'))
elevs <- xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/elevation'))
longs <- xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/location/lng'))
data.frame(lats,longs,elevs,resols)
lats <- xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/location/lat'))
data.frame(lats,longs,elevs,resols)
data.frame(lat=lats,lng=longs,elev=elevs,res=resols)
xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/elevation'))
unname(xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/elevation')))
elevs <- unname(xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/elevation')))
data.frame(lat=lats,lng=longs,elev=elevs,res=resols)
elevs <- unname(xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/elevation')))
resols <- unname(xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/resolution')))
lats <- unname(xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/location/lat')))
longs <- unname(xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/location/lng')))
data.frame(lat=lats,lng=longs,elev=elevs,res=resols)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
Colorado.xlim <- c(-109.054831,-102.056540)
Colorado.ylim <- c(36.996650,40.999198)
X.LHS <- lhs::maximinLHS(n=40,k=2)
X.Colorado <- t(apply(X.LHS,1,function(xrow) return(c(xrow[1]*(Colorado.xlim[2]-Colorado.xlim[1])+Colorado.xlim[1],xrow[2]*(Colorado.ylim[2]-Colorado.ylim[1])+Colorado.ylim[1]))))
my.filled.contour.func(get.elevation,n=9,xcontlim=Colorado.xlim,ycontlim=Colorado.ylim,batchmax = 90)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
my.filled.contour.func(get.elevation,n=9,xcontlim=Colorado.xlim,ycontlim=Colorado.ylim,batchmax = 90)
require(RCurl)
my.filled.contour.func(get.elevation,n=9,xcontlim=Colorado.xlim,ycontlim=Colorado.ylim,batchmax = 90)
elev_df
unname(xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/elevation')))
elev_parse <- xmlParse(elev_html)
elevs <- unname(xmlToDataFrame(nodes = getNodeSet((elev_xml),'//result/elevation')))
elev_parse
elevs <- unname(xmlToDataFrame(nodes = getNodeSet((elev_parse),'//result/elevation')))
elevs
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
get.elevation(X = X.Colorado)
elev_df
data.frame(lat=lats,lng=longs,elev=elevs,res=resols)
cbind(data.frame(lat=lats,lng=longs,elev=elevs,res=resols),elev_df)
elev_parse
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'))
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'))[1]
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'))=='OK'
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'))[1]=='ok'
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'))$test[1]
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'))$text[1]
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'))$text[1]=='OK'
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
get.elevation(X = X.Colorado)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
get.elevation(X = X.Colorado)
status
unname(xmlToDataFrame(nodes = getNodeSet((elev_parse),'//result/elevation')))
str(unname(xmlToDataFrame(nodes = getNodeSet((elev_parse),'//result/elevation'))))
str(unname(xmlToDataFrame(nodes = getNodeSet((elev_parse),'//result/elevation')),stringsAsFactors=F))
str(unname(xmlToDataFrame(nodes = getNodeSet((elev_parse),'//result/elevation'),stringsAsFactors = F)))
str(unname(xmlToDataFrame(nodes = getNodeSet((elev_parse),'//result/elevation'),colClasses = 'numeric')))
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'))
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'),colClasses = 'chr')
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'),colClasses = 'character')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
get.elevation(X = X.Colorado)
status
str(status)
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'),colClasses = 'character')
xmlToDataFrame(nodes = getNodeSet((elev_parse),'//status'),stringsAsFactors = F)
get.elevation(X = X.Colorado)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
get.elevation(X = X.Colorado)
str(status)
str(elev_df)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
X.Colorado
rbind(X.Colorado,X.Colorado,X.Colorado)
rbind(X.Colorado,X.Colorado,X.Colorado,X.Colorado)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
get.elevation(X = rbind(X.Colorado,X.Colorado,X.Colorado,X.Colorado))
get.elevation(X = rbind(X.Colorado,X.Colorado,X.Colorado,X.Colorado))
elev_html
get.elevation(X = rbind(X.Colorado,X.Colorado,X.Colorado,X.Colorado))
xmlParse(elev_html)
elev_html
RCurl::parseHTTPHeader(elev_html)
elev_html
grep(pattern = 'illegal request',x = elev_html)
grep(pattern = 'illegal request',x = 'abcdef')
grep(pattern = 'illegal request',x = paste(elev_html,elevhtml))
grep(pattern = 'illegal request',x = paste(elev_html,elev_html))
grep1(pattern = 'illegal request',x = paste(elev_html,elev_html))
grepl(pattern = 'illegal request',x = paste(elev_html,elev_html))
grepl(pattern = 'illegal request',x = 'abddefasdgasgasdfsdsd')
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
get.elevation(X = rbind(X.Colorado,X.Colorado,X.Colorado,X.Colorado))
require(mlegp)
n <- 30
x <- runif(n)
y <- runif(n)
z <- x*y
require(mlegp)
mlegp(X=data.frame(x,y),Z=z)
mod <- mlegp(X=data.frame(x,y),Z=z)
pred.func <- function(xx) {predict.gp(mod,xx)}
pred.func(1,2)
pred.func(c(.5,.5))
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
my.filled.contour.func(fn0 = pred.func,n=100)
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/Elevation_get.R')
setwd("C:/Users/cbe117/School/DOE/SMED/SMED-Code")
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
require(RCurl)
require(XML)
Colorado.xlim <- c(-109.054831,-102.056540)
Colorado.ylim <- c(36.996650,40.999198)
X.LHS <- lhs::maximinLHS(n=40,k=2)
source('~/.active-rstudio-document', echo=TRUE)
points(x,y,pch=19)
source('~/.active-rstudio-document')
my.filled.contour.data(x,y,z)
my.filled.contour.data(y,x,z)
source('~/.active-rstudio-document')
z <- exp(-sum(c(x-.5,y-.5)^2))
my.filled.contour.data(y,x,z)
z
z <- exp(-(c(x-.5,y-.5)^2))
z
z <- exp(-((x-.5)^2+(y-.5)^2))
z
my.filled.contour.data(y,x,z)
z <- exp(-((x-.5)^2+.5(y-.5)^2))
z <- exp(-((x-.5)^2+.5*(y-.5)^2))
my.filled.contour.data(y,x,z)
z <- exp(-((x-.5)^2+2*(y-.5)^2))
my.filled.contour.data(y,x,z)
my.filled.contour.data <- function(x,y=NULL,z,...) {
require(mlegp)
if (is.null(y)) {
if(ndim(x)<2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z)
pred.func <- function(xx) {predict.gp(mod,xx)}
my.filled.contour.func(fn0 = pred.func,...)
points(x,y,pch=19)
}
my.filled.contour.data(data.frame(x,y),z)
my.filled.contour.data(data.frame(x,y),z=z)
my.filled.contour.data <- function(x,y=NULL,z,...) {
require(mlegp)
if (is.null(y)) {
if(dim(x)<2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z)
pred.func <- function(xx) {predict.gp(mod,xx)}
my.filled.contour.func(fn0 = pred.func,...)
points(x,y,pch=19)
}
my.filled.contour.data(y,x,z)
my.filled.contour.data(data.frame(x,y),z=z)
data.frame(x,y)
dim(data.frame(x,y))
my.filled.contour.data <- function(x,y=NULL,z,...) {
require(mlegp)
if (is.null(y)) {
if(dim(x)[2]<2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z)
pred.func <- function(xx) {predict.gp(mod,xx)}
my.filled.contour.func(fn0 = pred.func,...)
points(x,y,pch=19)
}
my.filled.contour.data(y,x,z)
my.filled.contour.data(data.frame(x,y),z=z)
z <- exp(-((x-.5)^2+5*(y-.5)^2))
my.filled.contour.data(data.frame(x,y),z=z)
my.filled.contour.data <- function(x,y=NULL,z=NULL,...) {
require(mlegp)
if (is.null(y) & !is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
} else if (!is.null(y) & is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
z <- y
y <- x[,2]
x <- x[,1]
} else if (!is.null(y) & !is.null(z)) {
if (dim(x)[2]!=3) {stop('If only giving x it must have three columns')}
z <- x[,3]
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z)
pred.func <- function(xx) {predict.gp(mod,xx)}
my.filled.contour.func(fn0 = pred.func,...)
points(x,y,pch=19)
}
my.filled.contour.data(y,x,z)
my.filled.contour.data <- function(x,y=NULL,z=NULL,...) {
require(mlegp)
if (is.null(y) & !is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
} else if (!is.null(y) & is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
z <- y
y <- x[,2]
x <- x[,1]
} else if (is.null(y) & is.null(z)) {
if (dim(x)[2]!=3) {stop('If only giving x it must have three columns')}
z <- x[,3]
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z)
pred.func <- function(xx) {predict.gp(mod,xx)}
my.filled.contour.func(fn0 = pred.func,...)
points(x,y,pch=19)
}
my.filled.contour.data(y,x,z)
my.filled.contour.data(data.frame(x,y),z)
my.filled.contour.data(data.frame(x,y,z))
my.filled.contour.data <- function(x,y=NULL,z=NULL,...) {
require(mlegp)
if (is.null(y) & !is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
} else if (!is.null(y) & is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
z <- y
y <- x[,2]
x <- x[,1]
} else if (is.null(y) & is.null(z)) {
if (dim(x)[2]!=3) {stop('If only giving x it must have three columns')}
z <- x[,3]
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z,verbose=0)
pred.func <- function(xx) {predict.gp(mod,xx)}
my.filled.contour.func(fn0 = pred.func,...)
points(x,y,pch=19)
}
my.filled.contour.data(y,x,z)
x <- runif(n,-1,1)
y <- runif(n,0,2)
z <- x*y
z <- exp(-((x-.5)^2+5*(y-.5)^2))
my.filled.contour.data(y,x,z)
my.filled.contour.data <- function(x,y=NULL,z=NULL,...) {browser()
require(mlegp)
if (is.null(y) & !is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
} else if (!is.null(y) & is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
z <- y
y <- x[,2]
x <- x[,1]
} else if (is.null(y) & is.null(z)) {
if (dim(x)[2]!=3) {stop('If only giving x it must have three columns')}
z <- x[,3]
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z,verbose=0)
pred.func <- function(xx) {predict.gp(mod,xx)}
my.filled.contour.func(fn0 = pred.func,...)
points(x,y,pch=19)
}
my.filled.contour.data(y,x,z,xcontlim=0:1)
...
list(...)
names(list(...))
list(...)
my.filled.contour.data <- function(x,y=NULL,z=NULL,...) {browser()
require(mlegp)
if (is.null(y) & !is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
} else if (!is.null(y) & is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
z <- y
y <- x[,2]
x <- x[,1]
} else if (is.null(y) & is.null(z)) {
if (dim(x)[2]!=3) {stop('If only giving x it must have three columns')}
z <- x[,3]
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z,verbose=0)
pred.func <- function(xx) {predict.gp(mod,xx)}
my.filled.contour.func(fn0 = pred.func,xcontlim=1:2...)
points(x,y,pch=19)
}
my.filled.contour.data <- function(x,y=NULL,z=NULL,...) {browser()
require(mlegp)
if (is.null(y) & !is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
} else if (!is.null(y) & is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
z <- y
y <- x[,2]
x <- x[,1]
} else if (is.null(y) & is.null(z)) {
if (dim(x)[2]!=3) {stop('If only giving x it must have three columns')}
z <- x[,3]
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z,verbose=0)
pred.func <- function(xx) {predict.gp(mod,xx)}
my.filled.contour.func(fn0 = pred.func,xcontlim=1:2,...)
points(x,y,pch=19)
}
my.filled.contour.data(y,x,z,xcontlim=0:1)
my.filled.contour.data <- function(x,y=NULL,z=NULL,xcontlim=NULL,ycontlim=NULL...) {browser()
require(mlegp)
if (is.null(y) & !is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
} else if (!is.null(y) & is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
z <- y
y <- x[,2]
x <- x[,1]
} else if (is.null(y) & is.null(z)) {
if (dim(x)[2]!=3) {stop('If only giving x it must have three columns')}
z <- x[,3]
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z,verbose=0)
pred.func <- function(xx) {predict.gp(mod,xx)}
if(is.null(xcontlim)) {xcontlim <- c(min(x),max(x))}
if(is.null(ycontlim)) {ycontlim <- c(min(y),max(y))}
my.filled.contour.func(fn0 = pred.func,xcontlim=xcontlim,ycontlim=ycontlim,...)
points(x,y,pch=19)
}
my.filled.contour.data(y,x,z,xcontlim=0:1)
my.filled.contour.data <- function(x,y=NULL,z=NULL,xcontlim=NULL,ycontlim=NULL...) {browser()
require(mlegp)
if (is.null(y) & !is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
} else if (!is.null(y) & is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
z <- y
y <- x[,2]
x <- x[,1]
} else if (is.null(y) & is.null(z)) {
if (dim(x)[2]!=3) {stop('If only giving x it must have three columns')}
z <- x[,3]
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z,verbose=0)
pred.func <- function(xx) {predict.gp(mod,xx)}
if(is.null(xcontlim)) {xcontlim <- c(min(x),max(x))}
if(is.null(ycontlim)) {ycontlim <- c(min(y),max(y))}
browser()
my.filled.contour.func(fn0 = pred.func,xcontlim=xcontlim,ycontlim=ycontlim,...)
points(x,y,pch=19)
}
my.filled.contour.data(y,x,z,xcontlim=0:1)
my.filled.contour.data(y,x,z,xcontlim=0:1)
x
y
z
xcontlim
ycontlim
abcd
my.filled.contour.data <- function(x,y=NULL,z=NULL,xcontlim=NULL,ycontlim=NULL,...) {browser()
require(mlegp)
if (is.null(y) & !is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
} else if (!is.null(y) & is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
z <- y
y <- x[,2]
x <- x[,1]
} else if (is.null(y) & is.null(z)) {
if (dim(x)[2]!=3) {stop('If only giving x it must have three columns')}
z <- x[,3]
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z,verbose=0)
pred.func <- function(xx) {predict.gp(mod,xx)}
if(is.null(xcontlim)) {xcontlim <- c(min(x),max(x))}
if(is.null(ycontlim)) {ycontlim <- c(min(y),max(y))}
browser()
my.filled.contour.func(fn0 = pred.func,xcontlim=xcontlim,ycontlim=ycontlim,...)
points(x,y,pch=19)
}
my.filled.contour.data(y,x,z,xcontlim=0:1)
my.filled.contour.data(y,x,z)
my.filled.contour.data <- function(x,y=NULL,z=NULL,xcontlim=NULL,ycontlim=NULL,...) {
require(mlegp)
if (is.null(y) & !is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
y <- x[,2]
x <- x[,1]
} else if (!is.null(y) & is.null(z)) {
if(dim(x)[2]!=2) {stop('Either give y or x must be matrix')}
z <- y
y <- x[,2]
x <- x[,1]
} else if (is.null(y) & is.null(z)) {
if (dim(x)[2]!=3) {stop('If only giving x it must have three columns')}
z <- x[,3]
y <- x[,2]
x <- x[,1]
}
mod <- mlegp(X=data.frame(x,y),Z=z,verbose=0)
pred.func <- function(xx) {predict.gp(mod,xx)}
minx <- min(x);maxx <- max(x);miny <- min(y);maxy <- max(y)
if(is.null(xcontlim)) {xcontlim <- c(minx-.05*(maxx-minx),maxx+.05*(maxx-minx))}
if(is.null(ycontlim)) {ycontlim <- c(miny-.05*(maxy-miny),maxy+.05*(maxy-miny))}
my.filled.contour.func(fn0 = pred.func,xcontlim=xcontlim,ycontlim=ycontlim,...)
points(x,y,pch=19)
}
my.filled.contour.data(y,x,z)
install.packages("devtools")
install.packages("roxygen2")
source('C:/Users/cbe117/School/DOE/SMED/SMED-Code/myfilledcontour.R')
n <- 30
x <- runif(n,-1,1)
y <- runif(n,0,2)
z <- x*y
z <- exp(-((x-.5)^2+5*(y-.5)^2))
my.filled.contour.data(y,x,z)
contour.filled.data(y,x,z)
contour.filled.data(data.frame(x,y),z)
contour.filled.data(data.frame(x,y,z))
